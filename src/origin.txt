import base64
from io import BytesIO
import threading
import time
from typing import Dict, List, Optional, Any
import flet as ft
import qrcode
import requests
from wordcloud import WordCloud
import warnings

warnings.filterwarnings("ignore", category=DeprecationWarning)


class BilibiliClient:
    HEADERS = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36",
    }

    # UI Color Scheme
    THEME_PRIMARY = "#FB7299"  # Bilibili Pink
    THEME_DARK = "#18191C"     # Dark background
    THEME_CARD = "#232527"     # Card background
    THEME_TEXT = "#FFFFFF"     # Text color
    THEME_SECONDARY = "#505050"  # Secondary elements

    def __init__(self):
        self.login_cookies = None
        self.tag_names = []

    def get_qr_code(self) -> Optional[str]:
        """Get Bilibili login QR code and return the QR code key."""
        try:
            response = requests.get(
                "https://passport.bilibili.com/x/passport-login/web/qrcode/generate",
                headers=self.HEADERS
            )
            response.raise_for_status()
            data = response.json()
            if data["code"] == 0:
                qr_code_url = data["data"]["url"]
                login_qrcode_key = data["data"]["qrcode_key"]
                qrcode.make(qr_code_url).save("qr_code.png")
                return login_qrcode_key
            return None
        except (requests.RequestException, KeyError) as e:
            print(f"Error generating QR code: {e}")
            return None

    def check_login_status(self, qrcode_key: str, page: ft.Page) -> None:
        """Check QR code login status periodically."""
        while True:
            try:
                response = requests.get(
                    f"https://passport.bilibili.com/x/passport-login/web/qrcode/poll?qrcode_key={qrcode_key}",
                    headers=self.HEADERS
                )
                response.raise_for_status()
                data = response.json()
                status = data["data"]["code"]

                if status == 0:  # Login successful
                    self.login_cookies = response.cookies
                    self._handle_successful_login(page)
                    break
                elif status == 86038:  # QR code expired
                    self._handle_expired_qr_code(page)
                    break
            except (requests.RequestException, KeyError) as e:
                print(f"Error checking login status: {e}")
                time.sleep(5)  # Wait longer on error
                continue

            time.sleep(2)

    def _handle_successful_login(self, page: ft.Page) -> None:
        """Handle successful login by setting up the main UI."""
        # Clear all existing content
        page.clean()

        # Get user info
        user_info = self.get_user_info()
        if not user_info:
            self._show_error_page(page, "获取用户信息失败，请重试")
            return

        # Get watch history
        history = self.get_watch_history()
        if not history:
            history = []

        # Create modern UI layout
        self._create_app_layout(page, user_info, history)

    def _handle_expired_qr_code(self, page: ft.Page) -> None:
        """Handle expired QR code by regenerating a new one."""
        # Clear error messages first
        page.controls = [c for c in page.controls if not (
            hasattr(c, 'key') and c.key == "error_message")]

        # Add expired notice
        page.add(
            ft.Container(
                content=ft.Text("二维码已失效，正在刷新...",
                                size=16,
                                color=self.THEME_TEXT,
                                weight="bold",
                                text_align=ft.TextAlign.CENTER
                                ),
                margin=ft.margin.only(bottom=20),
                key="error_message"
            )
        )
        page.update()

        # Remove notice after 2 seconds
        time.sleep(2)
        page.controls = [c for c in page.controls if not (
            hasattr(c, 'key') and c.key == "error_message")]

        # Regenerate QR code
        new_qrcode_key = self.get_qr_code()
        if new_qrcode_key:
            # Update QR code image
            for control in page.controls:
                if hasattr(control, 'key') and control.key == "qr_code":
                    control.src = "qr_code.png"
                    control.update()
                    break

            page.update()

            # Start new checking thread
            threading.Thread(
                target=self.check_login_status,
                args=(new_qrcode_key, page),
                daemon=True
            ).start()
        else:
            self._show_error_page(page, "生成新的二维码失败，请刷新页面重试")

    def _show_error_page(self, page: ft.Page, message: str) -> None:
        """Display an error page with the given message."""
        page.clean()
        page.add(
            ft.Container(
                content=ft.Column([
                    ft.Icon(ft.icons.ERROR_OUTLINE, size=64,
                            color=self.THEME_PRIMARY),
                    ft.Text(message, size=18, color=self.THEME_TEXT, weight="bold",
                            text_align=ft.TextAlign.CENTER),
                    ft.ElevatedButton(
                        "重试",
                        on_click=lambda _: self._reload_app(page),
                        style=ft.ButtonStyle(
                            color=self.THEME_TEXT,
                            bgcolor=self.THEME_PRIMARY,
                            shape=ft.RoundedRectangleBorder(radius=8),
                        )
                    )
                ],
                    alignment=ft.MainAxisAlignment.CENTER,
                    horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                    spacing=20),
                alignment=ft.alignment.center,
                padding=50,
            )
        )
        page.update()

    def _reload_app(self, page: ft.Page) -> None:
        """Reload the application."""
        page.clean()
        setup_login_screen(page, self)

    def get_user_info(self) -> Optional[Dict[str, Any]]:
        """Get user information using the login cookies."""
        if not self.login_cookies:
            return None

        try:
            response = requests.get(
                "https://api.bilibili.com/x/web-interface/nav",
                headers=self.HEADERS,
                cookies=self.login_cookies
            )
            response.raise_for_status()
            data = response.json()

            if data["code"] == 0:
                user_info = data["data"]
                return {
                    "uname": user_info["uname"],
                    "mid": user_info["mid"],
                    "face": user_info["face"],
                }
            else:
                print(f"Failed to get user info: {data['message']}")
                return None
        except (requests.RequestException, KeyError) as e:
            print(f"Error getting user info: {e}")
            return None

    def get_watch_history(self) -> Optional[List[Dict[str, Any]]]:
        """Get user's watch history."""
        if not self.login_cookies:
            return None

        try:
            response = requests.get(
                "https://api.bilibili.com/x/web-interface/history/cursor",
                headers=self.HEADERS,
                cookies=self.login_cookies
            )
            response.raise_for_status()
            data = response.json()

            if data["code"] == 0:
                return data["data"]["list"]
            else:
                print(f"Failed to get watch history: {data['message']}")
                return None
        except (requests.RequestException, KeyError) as e:
            print(f"Error getting watch history: {e}")
            return None

    def _create_app_layout(self, page: ft.Page, user_info: Dict[str, Any], history: List[Dict[str, Any]]) -> None:
        """Create the main application layout with sidebar and content area."""
        # Create content area container that will be updated
        content_container = ft.Container(
            expand=True,
            padding=20,
            content=None
        )

        # Create sidebar with user info and navigation
        sidebar = self._create_sidebar(user_info, content_container, history)

        # Main layout with sidebar and content
        main_layout = ft.Row([
            sidebar,
            ft.VerticalDivider(
                width=1,
                color=self.THEME_SECONDARY
            ),
            content_container
        ], expand=True)

        page.add(main_layout)

        # Show history initially
        self._show_watch_history(history, content_container)
        page.update()

    def _create_sidebar(self, user_info: Dict[str, Any], content_area: ft.Container,
                        history: List[Dict[str, Any]]) -> ft.Container:
        """Create sidebar with user profile and navigation."""
        # User profile section
        user_profile = ft.Container(
            content=ft.Column([
                # User avatar
                ft.Container(
                    content=ft.CircleAvatar(
                        foreground_image_src=user_info["face"],
                        radius=40,
                    ),
                    margin=ft.margin.only(bottom=10)
                ),
                # User name
                ft.Text(
                    user_info["uname"],
                    size=18,
                    weight="bold",
                    color=self.THEME_TEXT,
                    text_align=ft.TextAlign.CENTER
                ),
                # User ID
                ft.Text(
                    f"UID: {user_info['mid']}",
                    size=14,
                    color=ft.colors.GREY_400,
                    text_align=ft.TextAlign.CENTER
                ),
            ],
                horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                spacing=5,
            ),
            padding=ft.padding.only(top=30, bottom=30),
            alignment=ft.alignment.center,
        )

        # Navigation items
        nav_history = self._create_nav_item(
            "历史记录",
            ft.icons.HISTORY,
            lambda _: self._show_watch_history(history, content_area)
        )

        nav_wordcloud = self._create_nav_item(
            "标签词云",
            ft.icons.CLOUD,
            lambda _: self._show_wordcloud(history, content_area)
        )

        nav_settings = self._create_nav_item(
            "设置",
            ft.icons.SETTINGS,
            lambda _: self._show_settings(content_area)
        )

        # Create sidebar container
        return ft.Container(
            width=220,
            bgcolor=self.THEME_DARK,
            content=ft.Column([
                user_profile,
                ft.Divider(height=1, color=self.THEME_SECONDARY),
                ft.Container(
                    content=ft.Column([
                        nav_history,
                        nav_wordcloud,
                        nav_settings,
                    ], spacing=0),
                    margin=ft.margin.only(top=10)
                ),
            ]),
        )

    def _create_nav_item(self, text: str, icon: str, on_click) -> ft.Container:
        """Create a navigation item for the sidebar."""
        return ft.Container(
            content=ft.Row([
                ft.Icon(icon, color=self.THEME_TEXT, size=20),
                ft.Text(text, color=self.THEME_TEXT, size=16),
            ], spacing=15),
            padding=15,
            border_radius=8,
            on_hover=lambda e: self._on_nav_hover(e),
            on_click=on_click,
            ink=True,
        )

    def _on_nav_hover(self, e) -> None:
        """Handle hover effect on navigation items."""
        if e.data == "true":  # hover enter
            e.control.bgcolor = self.THEME_SECONDARY
        else:  # hover exit
            e.control.bgcolor = None
        e.control.update()

    def _show_watch_history(self, history: List[Dict[str, Any]], content_area: ft.Container) -> None:
        """Display watch history in a grid view with modern design."""
        # Page title
        title = ft.Text("观看历史", size=24, weight="bold", color=self.THEME_TEXT)

        # Create grid for history items
        history_grid = ft.GridView(
            expand=True,
            runs_count=3,
            max_extent=320,
            child_aspect_ratio=0.7,
            spacing=20,
            run_spacing=20,
            padding=20,
        )

        if not history:
            content = ft.Column([
                title,
                ft.Container(
                    content=ft.Column([
                        ft.Icon(ft.icons.HISTORY_TOGGLE_OFF,
                                size=64, color=self.THEME_PRIMARY),
                        ft.Text("暂无观看历史", size=18, color=self.THEME_TEXT),
                    ],
                        alignment=ft.MainAxisAlignment.CENTER,
                        horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                        spacing=20),
                    alignment=ft.alignment.center,
                    expand=True,
                )
            ], spacing=20, expand=True)
        else:
            # Add items to grid
            for item in history:
                history_grid.controls.append(
                    self._create_history_card(item)
                )

            content = ft.Column([
                title,
                history_grid
            ], spacing=20, expand=True)

        # Update content area
        content_area.content = content
        content_area.update()

    def _create_history_card(self, item: Dict[str, Any]) -> ft.Card:
        """Create a modern card for a history item."""
        cover_url = item.get("cover", "")
        title = item.get("title", "无标题")
        author = item.get("author_name", "未知作者")
        view_at = item.get("view_at", "")

        # Format timestamp if available
        view_time = ""
        if view_at:
            try:
                view_time = time.strftime(
                    "%Y-%m-%d %H:%M", time.localtime(int(view_at)))
            except:
                view_time = "未知时间"

        return ft.Card(
            elevation=2,
            surface_tint_color=self.THEME_CARD,
            content=ft.Container(
                content=ft.Column([
                    # Video cover with gradient overlay
                    ft.Stack([
                        ft.Container(
                            content=ft.Image(
                                src=cover_url,
                                fit=ft.ImageFit.COVER,
                                width=280,
                                height=160,
                            ),
                            border_radius=ft.border_radius.only(
                                top_left=8, top_right=8
                            ),
                            clip_behavior=ft.ClipBehavior.ANTI_ALIAS,
                        ),
                        # Play button overlay
                        ft.Container(
                            content=ft.Icon(
                                ft.icons.PLAY_CIRCLE_FILL,
                                color=ft.colors.WHITE,
                                size=50,
                            ),
                            alignment=ft.alignment.center,
                        ),
                    ]),
                    # Video details
                    ft.Container(
                        content=ft.Column([
                            # Video title (truncate if too long)
                            ft.Text(
                                title if len(
                                    title) < 40 else title[:37] + "...",
                                size=16,
                                weight="bold",
                                color=self.THEME_TEXT,
                            ),
                            # Author
                            ft.Row([
                                ft.Icon(ft.icons.PERSON, size=14,
                                        color=ft.colors.GREY_400),
                                ft.Text(author, size=14,
                                        color=ft.colors.GREY_400),
                            ], spacing=5),
                            # View time
                            ft.Row([
                                ft.Icon(ft.icons.SCHEDULE, size=14,
                                        color=ft.colors.GREY_400),
                                ft.Text(view_time, size=14,
                                        color=ft.colors.GREY_400),
                            ], spacing=5),
                        ], spacing=8),
                        padding=15,
                    ),
                ], spacing=0),
                width=280,
                bgcolor=self.THEME_CARD,
                border_radius=8,
            ),
            margin=0,
        )

    def _show_wordcloud(self, history: List[Dict[str, Any]], content_area: ft.Container) -> None:
        """Generate and display a word cloud from watch history tags."""
        # Page title
        title = ft.Text("标签词云", size=24, weight="bold", color=self.THEME_TEXT)

        # Extract tags from history
        tags = []
        for item in history:
            if "tag_name" in item and item["tag_name"]:
                tags.append(item["tag_name"])

        if not tags:
            content = ft.Column([
                title,
                ft.Container(
                    content=ft.Column([
                        ft.Icon(ft.icons.CLOUD_OFF, size=64,
                                color=self.THEME_PRIMARY),
                        ft.Text("没有可用的标签数据", size=18, color=self.THEME_TEXT),
                    ],
                        alignment=ft.MainAxisAlignment.CENTER,
                        horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                        spacing=20),
                    alignment=ft.alignment.center,
                    expand=True,
                )
            ], spacing=20, expand=True)
        else:
            try:
                # Generate word cloud
                font_path = "./src/static/PingFang.otf"  # Replace with your font path
                wordcloud = WordCloud(
                    width=800,
                    height=500,
                    font_path=font_path,
                    background_color=self.THEME_DARK,
                    colormap="viridis",
                    min_font_size=10,
                    max_font_size=120,
                    random_state=42
                ).generate(" ".join(tags))

                # Convert to image and encode as base64
                buffer = BytesIO()
                wordcloud.to_image().save(buffer, format="PNG")
                buffer.seek(0)
                img_base64 = base64.b64encode(
                    buffer.getvalue()).decode("utf-8")

                # Display word cloud
                wordcloud_image = ft.Image(
                    src_base64=img_base64,
                    fit=ft.ImageFit.CONTAIN,
                )

                content = ft.Column([
                    title,
                    ft.Container(
                        content=wordcloud_image,
                        alignment=ft.alignment.center,
                        margin=ft.margin.only(top=20),
                        border_radius=15,
                        clip_behavior=ft.ClipBehavior.ANTI_ALIAS,
                        expand=True,
                    )
                ], spacing=10, expand=True)
            except Exception as e:
                content = ft.Column([
                    title,
                    ft.Container(
                        content=ft.Column([
                            ft.Icon(ft.icons.ERROR_OUTLINE, size=64,
                                    color=self.THEME_PRIMARY),
                            ft.Text(f"生成词云图时出错: {str(e)}",
                                    size=18, color=self.THEME_TEXT),
                        ],
                            alignment=ft.MainAxisAlignment.CENTER,
                            horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                            spacing=20),
                        alignment=ft.alignment.center,
                        expand=True,
                    )
                ], spacing=20, expand=True)

        # Update content area
        content_area.content = content
        content_area.update()

    def _show_settings(self, content_area: ft.Container) -> None:
        """Display settings page."""
        # Page title
        title = ft.Text("设置", size=24, weight="bold", color=self.THEME_TEXT)

        # Settings options
        settings_card = ft.Card(
            content=ft.Container(
                content=ft.Column([
                    # Account section
                    ft.Text("账户", size=18, weight="bold",
                            color=self.THEME_TEXT),
                    ft.Divider(height=1, color=self.THEME_SECONDARY),
                    ft.ListTile(
                        leading=ft.Icon(ft.icons.LOGOUT,
                                        color=self.THEME_PRIMARY),
                        title=ft.Text("退出登录", color=self.THEME_TEXT),
                        trailing=ft.Icon(
                            ft.icons.ARROW_FORWARD_IOS, color=self.THEME_TEXT, size=15),
                    ),

                    ft.Container(height=20),  # Spacer

                    # Appearance section
                    ft.Text("外观", size=18, weight="bold",
                            color=self.THEME_TEXT),
                    ft.Divider(height=1, color=self.THEME_SECONDARY),
                    ft.ListTile(
                        leading=ft.Icon(ft.icons.DARK_MODE,
                                        color=self.THEME_PRIMARY),
                        title=ft.Text("深色模式", color=self.THEME_TEXT),
                        trailing=ft.Switch(value=True),
                    ),

                    ft.Container(height=20),  # Spacer

                    # About section
                    ft.Text("关于", size=18, weight="bold",
                            color=self.THEME_TEXT),
                    ft.Divider(height=1, color=self.THEME_SECONDARY),
                    ft.ListTile(
                        leading=ft.Icon(
                            ft.icons.INFO, color=self.THEME_PRIMARY),
                        title=ft.Text("应用版本", color=self.THEME_TEXT),
                        trailing=ft.Text("1.0.0", color=ft.colors.GREY_400),
                    ),
                ],
                    spacing=10),
                padding=20,
                bgcolor=self.THEME_CARD,
            ),
            elevation=2,
        )

        content = ft.Column([
            title,
            settings_card
        ], spacing=20)

        content_area.content = content
        content_area.update()


def setup_login_screen(page: ft.Page, client: BilibiliClient) -> None:
    """Set up the login screen with QR code."""
    # Create a card for login
    login_card = ft.Card(
        content=ft.Container(
            content=ft.Column([
                # Bilibili logo
                ft.Container(
                    content=ft.Row([
                        ft.Text(
                            "Bili",
                            size=32,
                            weight="bold",
                            color=client.THEME_PRIMARY,
                        ),
                        ft.Text(
                            "Client",
                            size=32,
                            weight="bold",
                            color=client.THEME_TEXT,
                        ),
                    ],
                        alignment=ft.MainAxisAlignment.CENTER,
                    ),
                    margin=ft.margin.only(bottom=20)
                ),

                # QR Code
                ft.Container(
                    content=ft.Image(
                        src="qr_code.png",
                        width=200,
                        height=200,
                        fit=ft.ImageFit.CONTAIN,
                        key="qr_code"
                    ),
                    padding=20,
                    border_radius=10,
                    bgcolor=ft.colors.WHITE,
                    alignment=ft.alignment.center,
                ),

                # Login instructions
                ft.Container(
                    content=ft.Text(
                        "请使用Bilibili手机客户端扫描二维码登录",
                        size=16,
                        color=client.THEME_TEXT,
                        text_align=ft.TextAlign.CENTER,
                    ),
                    margin=ft.margin.only(top=20),
                ),
            ],
                alignment=ft.MainAxisAlignment.CENTER,
                horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                spacing=10,
            ),
            width=400,
            padding=50,
            bgcolor=client.THEME_CARD,
            border_radius=20,
        ),
        elevation=5,
    )

    # Add to page
    page.add(
        ft.Container(
            content=login_card,
            alignment=ft.alignment.center,
            expand=True,
        )
    )
    page.update()


def main(page: ft.Page):
    # Set page properties
    page.title = "Bilibili 客户端"
    page.theme_mode = ft.ThemeMode.DARK
    page.bgcolor = BilibiliClient.THEME_DARK
    page.padding = 0
    page.window_width = 1100
    page.window_height = 700
    page.window_min_width = 800
    page.window_min_height = 600

    # Create client instance
    client = BilibiliClient()

    # Get QR code key
    qr_code_key = client.get_qr_code()

    if not qr_code_key:
        # Show error if QR code generation failed
        client._show_error_page(page, "获取登录二维码失败，请检查网络连接")
        return

    # Set up login screen
    setup_login_screen(page, client)

    # Start login status checking thread
    threading.Thread(
        target=client.check_login_status,
        args=(qr_code_key, page),
        daemon=True
    ).start()


if __name__ == "__main__":
    ft.app(main)
